<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title><%= title %> | Football Hub</title>

    <!-- Bootstrap + Font Awesome + AOS + Google Fonts -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <style>
      :root {
        --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        --warning-gradient: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        --danger-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        --glass-bg: rgba(255, 255, 255, 0.25);
        --glass-border: rgba(255, 255, 255, 0.18);
        --text-primary: #2d3748;
        --text-secondary: #718096;
        --bg-primary: #f7fafc;
        --shadow-light: 0 4px 20px rgba(0, 0, 0, 0.08);
        --shadow-medium: 0 8px 40px rgba(0, 0, 0, 0.12);
        --shadow-heavy: 0 20px 60px rgba(0, 0, 0, 0.15);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        font-family: "Inter", sans-serif;
        color: var(--text-primary);
        min-height: 100vh;
        position: relative;
      }

      body::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(
            circle at 25% 25%,
            rgba(255, 255, 255, 0.1) 0%,
            transparent 50%
          ),
          radial-gradient(
            circle at 75% 75%,
            rgba(255, 255, 255, 0.1) 0%,
            transparent 50%
          );
        pointer-events: none;
        z-index: -1;
      }

      /* Hero Header */
      .player-header {
        background: transparent;
        color: white;
        padding: 4rem 0 2rem;
        position: relative;
        overflow: hidden;
      }

      .player-main-image {
        width: 300px;
        height: 350px;
        object-fit: cover;
        border-radius: 2rem;
        border: 5px solid white;
        box-shadow: var(--shadow-heavy);
        transition: all 0.4s ease;
      }

      .player-main-image:hover {
        transform: scale(1.05);
        box-shadow: 0 25px 80px rgba(0, 0, 0, 0.4);
      }

      /* Main Content */
      .main-content {
        background: var(--bg-primary);
        border-radius: 2rem 2rem 0 0;
        margin-top: -3rem;
        position: relative;
        z-index: 10;
        padding-top: 2rem;
      }

      /* Info Cards */
      .player-info-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 2rem;
        box-shadow: var(--shadow-medium);
        padding: 2.5rem;
        border: 1px solid rgba(255, 255, 255, 0.2);
        position: relative;
        overflow: hidden;
      }

      .player-info-card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: var(--primary-gradient);
      }

      /* Stat Cards */
      .stat-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 1.5rem;
        padding: 2rem;
        text-align: center;
        box-shadow: var(--shadow-light);
        border: 1px solid rgba(255, 255, 255, 0.2);
        margin-bottom: 1.5rem;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        position: relative;
        overflow: hidden;
      }

      .stat-card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 3px;
        transition: transform 0.3s ease;
      }

      .stat-card:hover {
        transform: translateY(-10px) scale(1.02);
        box-shadow: var(--shadow-heavy);
      }

      .stat-card:nth-child(1)::before {
        background: var(--success-gradient);
      }
      .stat-card:nth-child(2)::before {
        background: var(--primary-gradient);
      }
      .stat-card:nth-child(3)::before {
        background: var(--warning-gradient);
      }
      .stat-card:nth-child(4)::before {
        background: var(--secondary-gradient);
      }

      .stat-number {
        font-size: 2.5rem;
        font-weight: 800;
        font-family: "Poppins", sans-serif;
        margin-bottom: 0.5rem;
      }

      .stat-label {
        color: var(--text-secondary);
        font-size: 0.9rem;
        text-transform: uppercase;
        font-weight: 600;
        letter-spacing: 1px;
      }

      /* Badges */
      .captain-badge {
        background: var(--warning-gradient);
        color: #2d3748;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        font-size: 0.9rem;
        font-weight: 700;
        display: inline-block;
        box-shadow: var(--shadow-medium);
        margin-right: 1rem;
        margin-bottom: 1rem;
      }

      .team-badge {
        background: var(--primary-gradient);
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        font-size: 0.9rem;
        font-weight: 700;
        display: inline-block;
        box-shadow: var(--shadow-medium);
        margin-bottom: 1rem;
      }

      .cost-display {
        background: var(--success-gradient);
        color: white;
        padding: 1.5rem 2rem;
        border-radius: 1.5rem;
        font-size: 1.8rem;
        font-weight: 700;
        font-family: "Poppins", sans-serif;
        text-align: center;
        box-shadow: var(--shadow-medium);
        border: 1px solid rgba(255, 255, 255, 0.2);
      }

      /* Action Buttons */
      .action-buttons {
        position: sticky;
        top: 20px;
        z-index: 100;
        margin-bottom: 2rem;
      }

      .btn {
        border-radius: 50px;
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }

      .btn-primary {
        background: var(--primary-gradient);
        border: none;
        color: white;
      }

      .btn-warning {
        background: var(--warning-gradient);
        border: none;
        color: #2d3748;
      }

      .btn-danger {
        background: var(--danger-gradient);
        border: none;
        color: white;
      }

      .btn-success {
        background: var(--success-gradient);
        border: none;
        color: white;
      }

      .btn-outline-primary {
        border: 2px solid #667eea;
        color: #667eea;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(20px);
      }

      .btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-light);
      }

      .btn-outline-primary:hover {
        background: var(--primary-gradient);
        border-color: transparent;
        color: white;
      }

      /* Comments Section */
      .comment-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 1.5rem;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: var(--shadow-light);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-left: 4px solid #667eea;
        transition: all 0.3s ease;
      }

      .comment-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-medium);
      }

      .comment-form {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 2rem;
        padding: 2.5rem;
        margin-top: 2rem;
        box-shadow: var(--shadow-medium);
        border: 1px solid rgba(255, 255, 255, 0.2);
        position: relative;
        overflow: hidden;
      }

      .comment-form::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: var(--success-gradient);
      }

      /* Rating Stars */
      .rating-stars {
        color: #ffd700;
        font-size: 1.2rem;
        filter: drop-shadow(0 2px 4px rgba(255, 215, 0, 0.3));
      }

      .rating-stars .fa-star {
        margin-right: 0.25rem;
      }

      /* Form Elements */
      .form-control,
      .form-select {
        border: 2px solid #e2e8f0;
        border-radius: 1rem;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      }

      .form-control:focus,
      .form-select:focus {
        border-color: #4facfe;
        box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1);
        transform: translateY(-1px);
      }

      /* Modal Enhancements */
      .modal-content {
        border-radius: 1.5rem;
        border: none;
        box-shadow: var(--shadow-heavy);
        background: rgba(255, 255, 255, 0.98);
        backdrop-filter: blur(20px);
      }

      .modal-header {
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 1.5rem 1.5rem 0 0;
        padding: 1.5rem;
      }

      .modal-footer {
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 0 0 1.5rem 1.5rem;
        padding: 1.5rem;
      }

      /* Toast Styling */
      .toast {
        border-radius: 1rem;
        box-shadow: var(--shadow-medium);
        border: none;
      }

      /* Empty State */
      .empty-state {
        text-align: center;
        padding: 4rem 2rem;
      }

      .empty-state i {
        font-size: 4rem;
        color: var(--text-secondary);
        margin-bottom: 2rem;
        opacity: 0.5;
      }

      /* Player Title */
      .player-title {
        font-family: "Poppins", sans-serif;
        font-size: 3.5rem;
        font-weight: 800;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .player-main-image {
          width: 250px;
          height: 300px;
        }

        .player-title {
          font-size: 2.5rem;
        }

        .cost-display {
          font-size: 1.4rem;
          padding: 1rem 1.5rem;
        }

        .stat-card {
          padding: 1.5rem;
        }

        .stat-number {
          font-size: 2rem;
        }

        .comment-form,
        .player-info-card {
          padding: 1.5rem;
        }
      }

      /* Loading Animation */
      .loading {
        position: relative;
      }

      .loading::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 20px;
        height: 20px;
        margin: -10px 0 0 -10px;
        border: 2px solid #ffffff;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      /* Smooth Animations */
      .fade-in {
        animation: fadeIn 0.6s ease-out;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    </style>
  </head>
  <body>
    <%- include('../partials/navbar') %>

    <!-- Player Header -->
    <div class="player-header">
      <div class="container">
        <div class="row align-items-center">
          <div class="col-lg-4 text-center" data-aos="fade-right">
            <img
              src="<%= player.image %>"
              class="player-main-image"
              alt="<%= player.playerName %>"
              onerror="this.src='https://ui-avatars.com/api/?name=<%= player.playerName %>&size=300&background=667eea&color=ffffff&font-size=0.4'"
            />
          </div>
          <div class="col-lg-8" data-aos="fade-left" data-aos-delay="200">
            <div class="mb-3">
              <% if (player.isCaptain) { %>
              <span class="captain-badge">
                <i class="fas fa-crown"></i> Team Captain
              </span>
              <% } %>
              <span class="team-badge">
                <i class="fas fa-shield-alt"></i>
                <%= player.team && player.team.teamName ? player.team.teamName :
                'No Team' %>
              </span>
            </div>

            <h1 class="player-title"><%= player.playerName %></h1>

            <div class="row mb-4">
              <div class="col-md-6">
                <div class="cost-display">
                  <i class="fas fa-dollar-sign"></i> <%=
                  player.cost.toLocaleString() %>
                </div>
              </div>
              <div class="col-md-6">
                <div class="text-center mt-3 mt-md-0">
                  <div class="rating-stars mb-2">
                    <% const avgRating = player.avgRating || 0; for (let i = 1;
                    i <= 3; i++) { %>
                    <i
                      class="fas fa-star <%= i <= Math.round(avgRating) ? '' : 'text-muted' %>"
                    ></i>
                    <% } %>
                  </div>
                  <div class="text-white fs-5 fw-bold">
                    Average Rating: <%= avgRating.toFixed(1) %>/3
                  </div>
                  <div class="text-white-75">
                    <i class="fas fa-comments"></i> <%= player.commentCount || 0
                    %> reviews
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="main-content">
      <div class="container">
        <%- include('../partials/alerts') %>

        <!-- Action Buttons -->
        <% if (user && user.isAdmin) { %>
        <div class="action-buttons" data-aos="fade-up">
          <div class="btn-toolbar justify-content-center" role="toolbar">
            <div class="btn-group me-2" role="group">
              <a href="/players" class="btn btn-outline-primary">
                <i class="fas fa-arrow-left"></i> Back to List
              </a>
            </div>
            <div class="btn-group" role="group">
              <a href="/players/<%= player._id %>/edit" class="btn btn-warning">
                <i class="fas fa-edit"></i> Edit Player
              </a>
              <button
                class="btn btn-danger"
                data-action="delete-player"
                data-player-id="<%= player._id %>"
                data-player-name="<%= player.playerName %>"
              >
                <i class="fas fa-trash"></i> Delete Player
              </button>
            </div>
          </div>
        </div>
        <% } else { %>
        <div class="action-buttons text-center" data-aos="fade-up">
          <a href="/players" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left"></i> Back to Players
          </a>
        </div>
        <% } %>

        <!-- Player Stats -->
        <div class="row mb-5" data-aos="fade-up" data-aos-delay="300">
          <div class="col-md-3">
            <div class="stat-card">
              <div class="stat-number text-success">
                $<%= player.cost.toLocaleString() %>
              </div>
              <div class="stat-label">Market Value</div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="stat-card">
              <div class="stat-number text-primary">
                <%= player.commentCount || 0 %>
              </div>
              <div class="stat-label">Total Reviews</div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="stat-card">
              <div class="stat-number text-warning">
                <%= (player.avgRating || 0).toFixed(1) %>
              </div>
              <div class="stat-label">Avg Rating</div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="stat-card">
              <div class="stat-number text-info">
                <% if (player.isCaptain) { %>
                <i class="fas fa-crown"></i>
                <% } else { %>
                <i class="fas fa-user"></i>
                <% } %>
              </div>
              <div class="stat-label">
                <%= player.isCaptain ? 'Captain' : 'Player' %>
              </div>
            </div>
          </div>
        </div>

        <!-- Player Information -->
        <div
          class="player-info-card mb-5"
          data-aos="fade-up"
          data-aos-delay="400"
        >
          <h3 class="mb-4">
            <i class="fas fa-info-circle text-primary"></i> Player Information
          </h3>
          <p class="lead"><%= player.information %></p>
        </div>

        <!-- Comments Section -->
        <div class="row">
          <div class="col-12">
            <h3 class="mb-4" data-aos="fade-up" data-aos-delay="500">
              <i class="fas fa-comments text-primary"></i>
              Player Reviews (<%= player.comments ? player.comments.length : 0
              %>)
            </h3>

            <!-- Add Comment Form (Only for logged in users) -->
            <% if (user) { %>
            <div class="comment-form" data-aos="fade-up" data-aos-delay="600">
              <h5 class="mb-3">
                <i class="fas fa-plus text-success"></i> Add Your Review
              </h5>
              <form id="commentForm">
                <div class="row">
                  <div class="col-md-6 mb-3">
                    <label for="rating" class="form-label fw-bold"
                      >Rating</label
                    >
                    <select
                      class="form-select"
                      id="rating"
                      name="rating"
                      required
                    >
                      <option value="">Select rating...</option>
                      <option value="1">⭐ 1 - Poor</option>
                      <option value="2">⭐⭐ 2 - Good</option>
                      <option value="3">⭐⭐⭐ 3 - Excellent</option>
                    </select>
                  </div>
                </div>
                <div class="mb-3">
                  <label for="content" class="form-label fw-bold"
                    >Your Review</label
                  >
                  <textarea
                    class="form-control"
                    id="content"
                    name="content"
                    rows="4"
                    placeholder="Share your thoughts about this player..."
                    required
                  ></textarea>
                </div>
                <button type="submit" class="btn btn-success" id="commentBtn">
                  <i class="fas fa-plus"></i> Add Review
                </button>
              </form>
            </div>
            <% } else { %>
            <div
              class="alert alert-info"
              data-aos="fade-up"
              data-aos-delay="600"
            >
              <i class="fas fa-info-circle"></i>
              <a href="/auth/signin" class="text-decoration-none">Sign in</a> to
              leave a review for this player.
            </div>
            <% } %>

            <!-- Comments List -->
            <div class="mt-4" id="commentsList">
              <% if (!player.comments || player.comments.length === 0) { %>
              <div class="empty-state" data-aos="fade-up" data-aos-delay="700">
                <i class="fas fa-comments"></i>
                <h5 class="text-muted">No reviews yet</h5>
                <p class="text-muted">Be the first to review this player!</p>
              </div>
              <% } else { %> <% player.comments.forEach((comment, index) => { %>
              <div
                class="comment-card fade-in"
                data-comment-id="<%= comment._id %>"
                data-aos="fade-up"
                data-aos-delay="<%= 700 + (index * 100) %>"
              >
                <div
                  class="d-flex justify-content-between align-items-start mb-2"
                >
                  <div>
                    <% if (comment.author && comment.author.name) { %>
                    <strong><%= comment.author.name %></strong>
                    <small class="text-muted"
                      >(@<%= comment.author.membername %>)</small
                    >
                    <% } else { %>
                    <strong>Anonymous</strong>
                    <small class="text-muted">(User deleted)</small>
                    <% } %>
                    <div class="rating-stars mt-1">
                      <% for (let i = 1; i <= 3; i++) { %>
                      <i
                        class="fas fa-star <%= i <= comment.rating ? '' : 'text-muted' %>"
                      ></i>
                      <% } %>
                    </div>
                  </div>
                  <div class="text-end">
                    <small class="text-muted">
                      <%= new Date(comment.createdAt).toLocaleDateString() %>
                    </small>
                    <% if (user && comment.author && (user._id ===
                    comment.author._id.toString() || user.isAdmin)) { %>
                    <div class="btn-group btn-group-sm mt-1">
                      <button
                        class="btn btn-outline-warning btn-sm edit-comment-btn"
                        data-comment-id="<%= comment._id %>"
                        data-rating="<%= comment.rating %>"
                        data-content="<%= comment.content %>"
                      >
                        <i class="fas fa-edit"></i>
                      </button>
                      <button
                        class="btn btn-outline-danger btn-sm delete-comment-btn"
                        data-comment-id="<%= comment._id %>"
                      >
                        <i class="fas fa-trash"></i>
                      </button>
                    </div>
                    <% } %>
                  </div>
                </div>
                <p class="mb-0"><%= comment.content %></p>
              </div>
              <% }) %> <% } %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Comment Modal -->
    <div class="modal fade" id="editCommentModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-edit text-warning"></i> Edit Review
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <form id="editCommentForm">
            <div class="modal-body">
              <div class="mb-3">
                <label for="editRating" class="form-label fw-bold"
                  >Rating</label
                >
                <select
                  class="form-select"
                  id="editRating"
                  name="rating"
                  required
                >
                  <option value="1">⭐ 1 - Poor</option>
                  <option value="2">⭐⭐ 2 - Good</option>
                  <option value="3">⭐⭐⭐ 3 - Excellent</option>
                </select>
              </div>
              <div class="mb-3">
                <label for="editContent" class="form-label fw-bold"
                  >Your Review</label
                >
                <textarea
                  class="form-control"
                  id="editContent"
                  name="content"
                  rows="4"
                  required
                ></textarea>
              </div>
              <input type="hidden" id="editCommentId" />
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal"
              >
                Cancel
              </button>
              <button type="submit" class="btn btn-warning" id="editCommentBtn">
                <i class="fas fa-save"></i> Update Review
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Hidden data for JavaScript -->
    <script type="application/json" id="pageData">
      {
        "playerId": "<%= player._id %>",
        "user": <% if (user) { %>true<% } else { %>false<% } %>,
        "isAdmin": <% if (user && user.isAdmin) { %>true<% } else { %>false<% } %>
      }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

    <script>
      // Initialize AOS
      AOS.init({
        duration: 800,
        easing: "ease-out-cubic",
        once: true,
        offset: 100,
      });

      // Get page data
      const pageData = JSON.parse(
        document.getElementById("pageData").textContent
      );

      // Show toast using modern alerts
      function showToast(type, message) {
        // Create alert element
        const alertDiv = document.createElement("div");
        alertDiv.className = `modern-alert alert-${type} d-flex align-items-center`;
        alertDiv.innerHTML = `
        <div class="alert-icon">
          <i class="fas fa-${
            type === "success" ? "check" : "exclamation-triangle"
          }"></i>
        </div>
        <div class="alert-content">
          <div class="alert-title">${
            type === "success" ? "Success!" : "Error!"
          }</div>
          <div class="alert-message">${message}</div>
        </div>
        <button type="button" class="alert-close" onclick="this.parentElement.remove()">
          <i class="fas fa-times"></i>
        </button>
      `;

        // Add to page
        const container = document.querySelector(".container");
        container.insertBefore(alertDiv, container.firstChild);

        // Auto remove after 5 seconds
        setTimeout(() => {
          if (alertDiv.parentElement) {
            alertDiv.remove();
          }
        }, 5000);
      }

      document.addEventListener("DOMContentLoaded", function () {
        if (pageData.user) {
          // Add comment form handler
          const commentForm = document.getElementById("commentForm");
          if (commentForm) {
            commentForm.addEventListener("submit", async function (e) {
              e.preventDefault();

              const commentBtn = document.getElementById("commentBtn");
              const originalText = commentBtn.innerHTML;
              commentBtn.innerHTML =
                '<i class="fas fa-spinner fa-spin"></i> Adding...';
              commentBtn.disabled = true;
              commentBtn.classList.add("loading");

              const formData = new FormData(this);
              const data = {
                rating: parseInt(formData.get("rating")),
                content: formData.get("content").trim(),
              };

              try {
                const response = await fetch(
                  `/players/${pageData.playerId}/comments`,
                  {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                      "X-Requested-With": "XMLHttpRequest",
                    },
                    body: JSON.stringify(data),
                  }
                );
                const result = await response.json();
                if (response.ok) {
                  this.reset();
                  showToast(
                    "success",
                    result.message || "Review added successfully!"
                  );
                  setTimeout(() => location.reload(), 1500);
                } else {
                  showToast("error", result.error || "Failed to add review");
                }
              } catch (err) {
                console.error(err);
                showToast("error", "Failed to add review. Please try again.");
              } finally {
                commentBtn.innerHTML = originalText;
                commentBtn.disabled = false;
                commentBtn.classList.remove("loading");
              }
            });
          }

          // Edit comment buttons
          document.querySelectorAll(".edit-comment-btn").forEach((btn) => {
            btn.addEventListener("click", function () {
              const commentId = this.dataset.commentId;
              const rating = this.dataset.rating;
              const content = this.dataset.content;
              editComment(commentId, rating, content);
            });
          });

          // Delete comment buttons
          document.querySelectorAll(".delete-comment-btn").forEach((btn) => {
            btn.addEventListener("click", function () {
              const commentId = this.dataset.commentId;
              deleteComment(commentId);
            });
          });

          // Edit comment form handler
          const editForm = document.getElementById("editCommentForm");
          if (editForm) {
            editForm.addEventListener("submit", async function (e) {
              e.preventDefault();
              const editBtn = document.getElementById("editCommentBtn");
              const originalText = editBtn.innerHTML;
              editBtn.innerHTML =
                '<i class="fas fa-spinner fa-spin"></i> Updating...';
              editBtn.disabled = true;
              editBtn.classList.add("loading");

              const commentId = document.getElementById("editCommentId").value;
              const formData = new FormData(this);
              const data = {
                rating: parseInt(formData.get("rating")),
                content: formData.get("content").trim(),
              };

              try {
                const response = await fetch(
                  `/players/${pageData.playerId}/comments/${commentId}`,
                  {
                    method: "PUT",
                    headers: {
                      "Content-Type": "application/json",
                      "X-Requested-With": "XMLHttpRequest",
                    },
                    body: JSON.stringify(data),
                  }
                );
                const result = await response.json();
                if (response.ok) {
                  bootstrap.Modal.getInstance(
                    document.getElementById("editCommentModal")
                  ).hide();
                  showToast(
                    "success",
                    result.message || "Review updated successfully!"
                  );
                  setTimeout(() => location.reload(), 1500);
                } else {
                  showToast("error", result.error || "Failed to update review");
                }
              } catch (err) {
                console.error(err);
                showToast(
                  "error",
                  "Failed to update review. Please try again."
                );
              } finally {
                editBtn.innerHTML = originalText;
                editBtn.disabled = false;
                editBtn.classList.remove("loading");
              }
            });
          }

          if (pageData.isAdmin) {
            // Delete player button
            const deletePlayerBtn = document.querySelector(
              '[data-action="delete-player"]'
            );
            if (deletePlayerBtn) {
              deletePlayerBtn.addEventListener("click", async function () {
                const playerId = this.dataset.playerId;
                const playerName = this.dataset.playerName;

                if (
                  !confirm(
                    `Are you sure you want to delete player "${playerName}"?`
                  )
                )
                  return;

                const originalText = this.innerHTML;
                this.innerHTML =
                  '<i class="fas fa-spinner fa-spin"></i> Deleting...';
                this.disabled = true;

                try {
                  const response = await fetch(`/players/${playerId}`, {
                    method: "DELETE",
                    headers: {
                      "X-Requested-With": "XMLHttpRequest",
                    },
                  });
                  const result = await response.json();
                  if (response.ok) {
                    showToast(
                      "success",
                      result.message ||
                        `Player "${playerName}" deleted successfully!`
                    );
                    setTimeout(() => (window.location.href = "/players"), 1500);
                  } else {
                    showToast(
                      "error",
                      result.error || "Failed to delete player"
                    );
                  }
                } catch (err) {
                  console.error(err);
                  showToast(
                    "error",
                    "Failed to delete player. Please try again."
                  );
                } finally {
                  this.innerHTML = originalText;
                  this.disabled = false;
                }
              });
            }
          }
        }
      });

      // Global functions
      function deleteComment(commentId) {
        if (!confirm("Are you sure you want to delete this review?")) return;

        fetch(`/players/${pageData.playerId}/comments/${commentId}`, {
          method: "DELETE",
          headers: {
            "X-Requested-With": "XMLHttpRequest",
          },
        })
          .then((response) => response.json())
          .then((result) => {
            if (result.success === true || result.status === true) {
              showToast(
                "success",
                result.message || "Review deleted successfully!"
              );
              setTimeout(() => location.reload(), 1500);
            } else {
              showToast("error", result.error || "Failed to delete review");
            }
          })
          .catch((err) => {
            console.error(err);
            showToast("error", "Failed to delete review. Please try again.");
          });
      }

      function editComment(commentId, rating, content) {
        document.getElementById("editCommentId").value = commentId;
        document.getElementById("editRating").value = rating;
        document.getElementById("editContent").value = content;
        new bootstrap.Modal(document.getElementById("editCommentModal")).show();
      }
    </script>

    <%- include('../partials/scripts') %>
  </body>
</html>
